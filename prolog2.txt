Cut
Up to this point, we have worked with Prolog's backtracking execution behavior. We have seen how to use that behavior to write compact predicates. 

Sometimes it is desirable to selectively turn off backtracking. Prolog provides a predicate that performs this function. It is called the cut, represented by an exclamation point (!). 

The cut effectively tells Prolog to freeze all the decisions made so far in this predicate. That is, if required to backtrack, it will automatically fail without trying other alternatives. 

We will first examine the effects of the cut and then look at some practical reasons to use it. 



Figure 13.1. The effect of the cut on flow of control 

When the cut is encountered, it re-routes backtracking, as shown in figure 13.1. It short-circuits backtracking in the goals to its left on its level, and in the level above, which contained the cut. That is, both the parent goal (middle goal of top level) and the goals of the particular rule being executed (second level) are affected by the cut. The effect is undone if a new route is taken into the parent goal. Contrast figure 13.1 with figure 5.1. 

We will write some simple predicates that illustrate the behavior of the cut, first adding some data to backtrack over. 

data(one).
data(two).
data(three).
Here is the first test case. It has no cut and will be used for comparison purposes. 

cut_test_a(X) :-
  data(X).
cut_test_a('last clause').
This is the control case, which exhibits the normal behavior. 

?- cut_test_a(X), write(X), nl, fail.
one
two
three
last clause
no
Next, we put a cut at the end of the first clause. 

cut_test_b(X) :-
  data(X),
  !.
cut_test_b('last clause').
Note that it stops backtracking through both the data/1 subgoal (left), and the cut_test_b parent (above). 

?- cut_test_b(X), write(X), nl, fail.
one
no
Next we put a cut in the middle of two subgoals. 

cut_test_c(X,Y) :-
  data(X),
  !,
  data(Y).
cut_test_c('last clause').
Note that the cut inhibits backtracking in the parent cut_test_c and in the goals to the left of (before) the cut (first data/1). The second data/1 to the right of (after) the cut is still free to backtrack. 

?- cut_test_c(X,Y), write(X-Y), nl, fail.
one - one
one - two
one - three
no
Performance is the main reason to use the cut. This separates the logical purists from the pragmatists. Various arguments can also be made as to its effect on code readability and maintainability. It is often called the 'goto' of logic programming. 

You will most often use the cut when you know that at a certain point in a given predicate, Prolog has either found the only answer, or if it hasn't, there is no answer. In this case you insert a cut in the predicate at that point. 

Similarly, you will use it when you want to force a predicate to fail in a certain situation, and you don't want it to look any further. 

Using the Cut 
We will now introduce to the game the little puzzles that make adventure games fun to play. We will put them in a predicate called puzzle/1. The argument to puzzle/1 will be one of the game commands, and puzzle/1 will determine whether or not there are special constraints on that command, reacting accordingly. 

We will see examples of both uses of the cut in the puzzle/1 predicate. The behavior we want is 

If there is a puzzle, and the constraints are met, quietly succeed. 
If there is a puzzle, and the constraints are not met, noisily fail. 
If there is no puzzle, quietly succeed. 
The puzzle in Nani Search is that in order to get to the cellar, the game player needs to both have the flashlight and turn it on. If these criteria are met we know there is no need to ever backtrack through puzzle/1 looking for other clauses to try. For this reason we include the cut. 

puzzle(goto(cellar)):-
  have(flashlight),
  turned_on(flashlight),
  !.
If the puzzle constraints are not met, then let the player know there is a special problem. In this case we also want to force the calling predicate to fail, and we don't want it to succeed by moving to other clauses of puzzle/1. Therefore we use the cut to stop backtracking, and we follow it with fail. 

puzzle(goto(cellar)):-
  write('It''s dark and you are afraid of the dark.'),
  !, fail.
The final clause is a catchall for those commands that have no special puzzles associated with them. They will always succeed in a call to puzzle/1. 

puzzle(_).
For logical purity, it is always possible to rewrite the predicates without the cut. This is done with the built-in predicate not/1. Some claim this provides for clearer code, but often the explicit and liberal use of 'not' clutters up the code, rather than clarifying it. 

When using the cut, the order of the rules becomes important. Our second clause for puzzle/1 safely prints an error message, because we know the only way to get there is by the first clause failing before it reached the cut. 

The third clause is completely general, because we know the earlier clauses have caught the special cases. 

If the cuts were removed from the clauses, the second two clauses would have to be rewritten. 

puzzle(goto(cellar)):-
  not(have(flashlight)),
  not(turned_on(flashlight)),
  write('Scared of dark message'),
  fail.
puzzle(X):-
  not(X = goto(cellar)).
In this case the order of the clauses would not matter. 

It is interesting to note that not/1 is defined using the cut. It also uses call/1, another built-in predicate that calls a predicate. 

not(X) :- call(X), !, fail.
not(X).
In the next chapter we will see how to add a command loop to the game. Until then we can test the puzzle predicate by including a call to it in each individual command. For example 

goto(Place) :- 
  puzzle(goto(Place)),
  can_go(Place),
  move(Place),
  look.
Assuming the player is in the kitchen, an attempt to go to the cellar will fail. 

?- goto(cellar).
It's dark and you are afraid of the dark.
no

?- goto(office).
You are in the office...
Then if the player takes the flashlight, turns it on, and return to the kitchen, all goes well. 

?- goto(cellar).
You are in the cellar... 
Exercises 
Adventure Game
1- Test the puzzle/1 predicate by setting up various game situations and seeing how it responds. When testing predicates with cuts you should always use the semicolon (;) after each answer to make sure it behaves correctly on backtracking. In our case puzzle/1 should always give one response and fail on backtracking. 

2- Add your own puzzles for different situations and commands. 

Expert System
3- Modify the ask and menuask predicates to use cut to replace the use of not. 

Customer Order Entry
4- Modify the good_customer rules to use cut to prevent the search of other cases once we know one has been found. 

Copyright ©1990,1996-97 Amzi! inc. All Rights Reserved


4


Compound Queries
Simple goals can be combined to form compound queries. For example, we might want to know if there is anything good to eat in the kitchen. In Prolog we might ask 

?- location(X, kitchen), edible(X).
Whereas a simple query had a single goal, the compound query has a conjunction of goals. The comma separating the goals is read as "and." 

Logically (declaratively) the example means "Is there an X such that X is located in the kitchen and X is edible?" If the same variable name appears more than once in a query, it must have the same value in all places it appears. The query in the above example will only succeed if there is a single value of X that can satisfy both goals. 

However, the variable name has no significance to any other query, or clause in the database. If X appears in other queries or clauses, that query or clause gets its own copy of the variable. We say the scope of a logical variable is a query. 

Trying the sample query we get 

?- location(X, kitchen), edible(X).
X = apple ;
X = crackers ;
no
The 'broccoli' does not show up as an answer because we did not include it in the edible/1 predicate. 

This logical query can also be interpreted procedurally, using an understanding of Prolog's execution strategy. The procedural interpretation is: "First find an X located in the kitchen, and then test to see if it is edible. If it is not, go back and find another X in the kitchen and test it. Repeat until successful, or until there are no more Xs in the kitchen." 

To understand the execution of a compound query, think of the goals as being arranged from left to right. Also think of a separate table which is kept for the current variable bindings. The flow of control moves back and forth through the goals as Prolog attempts to find variable bindings that satisfy the query. 

Each goal can be entered from either the left or the right, and can be left from either the left or the right. These are the ports of the goal as seen in the last chapter. 

A compound query begins by calling the first goal on the left. If it succeeds, the next goal is called with the variable bindings as set from the previous goal. If the query finishes via the exit port of the rightmost goal, it succeeds, and the listener prints the values in the variable table. 

If the user types semicolon (;) after an answer, the query is re-entered at the redo port of the rightmost goal. Only the variable bindings that were set in that goal are undone. 

If the query finishes via the fail port of the leftmost goal, the query fails. Figure 4.1 shows a compound query with the listener interaction on the ending ports.



Figure 4.1. Compound queries 

Figure 4.2 contains the annotated trace of the sample query. Make sure you understand it before proceeding. 

?- location(X, kitchen), edible(X).
The trace has a new feature, which is a number in the first column that indicates the goal being worked on.

First the goal location(X, kitchen) is called, and the trace indicates that pattern matches the second clause of location.

1 CALL location(X, kitchen)
It succeeds, and results in the binding of X to apple.

1 EXIT (2)location(apple, kitchen)
Next, the second goal edible(X) is called. However, X is now bound to apple, so it is called as edible(apple).

2 CALL edible(apple)
It succeeds on the first clause of edible/1, thus exiting the query successfully.

2 EXIT (1) edible(apple)
    X = apple ;
Entering semicolon (;) causes the listener to backtrack into the rightmost goal of the query.

2 REDO edible(apple)
There are no other clauses that match this pattern, so it fails.

2 FAIL edible(apple)
Leaving the fail port of the second goal causes the listener to enter the redo port of the first goal. In so doing, the variable binding that was established by that goal is undone, leaving X unbound.

1 REDO location(X, kitchen)
It now succeeds at the sixth clause, rebinding X to broccoli.

1 EXIT (6) location(broccoli, kitchen)
The second goal is called again with the new variable binding. This is a fresh call, just as the first one was, and causes the search for a match to begin at the first clause

2 CALL edible(broccoli)
There is no clause for edible(broccoli), so it fails.

2 FAIL edible(broccoli)
The first goal is then re-entered at the redo port, undoing the variable binding.

1 REDO location(X, kitchen)
It succeeds with a new variable binding.

1 EXIT (7) location(crackers, kitchen)
This leads to the second solution to the query.

2 CALL edible(crackers)
2 EXIT (2) edible(crackers)
    X = crackers ;
Typing semicolon (;) initiates backtracking again, which fails through both goals and leads to the ultimate failure of the query.

2 REDO edible(crackers)
2 FAIL edible(crackers)
1 REDO location(X, kitchen)
1 FAIL location(X, kitchen)
     no
 

Figure 4.2. Annotated trace of compound query 

In this example we had a single variable, which was bound (given a value) by the first goal and tested in the second goal. We will now look at a more general example with two variables. It is attempting to ask for all the things located in rooms adjacent to the kitchen. 

In logical terms, the query says "Find a T and R such that there is a door from the kitchen to R and T is located in R." In procedural terms it says "First find an R with a door from the kitchen to R. Use that value of R to look for a T located in R." 

?- door(kitchen, R), location(T,R).
R = office
T = desk ;

R = office
T = computer ;

R = cellar
T = 'washing machine' ;
no
In this query, the backtracking is more complex. Figure 4.3 shows its trace. 

Notice that the variable R is bound by the first goal and T is bound by the second. Likewise, the two variables are unbound by entering the redo port of the goal that bound them. After R is first bound to office, that binding sticks during backtracking through the second goal. Only when the listener backtracks into the first goal does R get unbound. 

Goal: door(kitchen, R), location(T,R)

1 CALL door(kitchen, R)
1 EXIT (2) door(kitchen, office)
2 CALL location(T, office)
2 EXIT (1) location(desk, office)
    R = office
    T = desk ;
2 REDO location(T, office)
2 EXIT (8) location(computer, office)
    R = office
    T = computer ;
2 REDO location(T, office)
2 FAIL location(T, office)
1 REDO door(kitchen, R)
1 EXIT (4) door(kitchen, cellar)
2 CALL location(T, cellar)
2 EXIT (4) location('washing machine', cellar)
    R = cellar
    T = 'washing machine' ;
2 REDO location(T, cellar)
2 FAIL location(T, cellar)
1 REDO door(kitchen, R)
1 FAIL door(kitchen, R)
     no
 

Figure 4.3. Trace of a compound query 

Built-in Predicates 
Up to this point we have been satisfied with the format Prolog uses to give us answers. We will now see how to generate output that is customized to our needs. The example will be a query that lists all of the items in the kitchen. This will require performing I/O and forcing the listener to automatically backtrack to find all solutions. 

To do this, we need to understand the concept of the built-in (evaluable) predicate. A built-in predicate is predefined by Prolog. There are no clauses in the database for built-in predicates. When the listener encounters a goal that matches a built-in predicate, it calls a predefined procedure. 

Built-in predicates are usually written in the language used to implement the listener. They can perform functions that have nothing to do with logical theorem proving, such as writing to the console. For this reason they are sometimes called extra-logical predicates. 

However, since they appear as Prolog goals they must be able to respond to either a call from the left or a redo from the right. Its response in the redo case is referred to as its behavior on backtracking. 

We will introduce specific built-in predicates as we need them. Here are the I/O predicates that will let us control the output of our query. 

write/1 
This predicate always succeeds when called, and has the side effect of writing its argument to the console.It always fails on backtracking. Backtracking does not undo the side effect. 
nl/0 
Succeeds, and starts a new line. Like write, it always succeeds when called, and fails on backtracking. 
tab/1 
It expects the argument to be an integer and tabs that number of spaces. It succeeds when called and fails on backtracking. 
Figure 4.4 is a stylized picture of a goal showing its internal control structure. We will compare this with the internal flow of control of various built-in predicates.



Figure 4.4. Internal flow of control through a normal goal 

In figure 4.4, the upper left diamond represents the decision point after a call. Starting with the first clause of a predicate, unification is attempted between the query pattern and each clause, until either unification succeeds or there are no more clauses to try. If unification succeeded, branch to exit, marking the clause that successfully unified, if it fail



7


Managing Data
We have seen that a Prolog program is a database of predicates, and so far we have entered clauses for those predicates directly in our programs. Prolog also allows us to manipulate the database directly and provides built-in predicates to perform this function. The main ones are 

asserta(X) 
Adds the clause X as the first clause for its predicate. Like the other I/O predicates, it always fails on backtracking and does not undo its work. 
assertz(X) 
Same as asserta/1, only it adds the clause X as the last clause for its predicate. 
retract(X) 
Removes the clause X from the database, again with a permanent effect that is not undone on backtracking. 
The ability to manipulate the database is obviously an important feature for Nani Search. With it we can dynamically change the location of the player, as well as the stuff that has been picked up and moved. 

We will first develop goto/1, which moves the player from one room to another. It will be developed from the top down, in contrast to look/0 which was developed from the bottom up. 

When the player enters the command goto, we first check if they can go to the place and if so move them so they can look around the new place. Starting from this description of goto/1, we can write the main predicate. 

goto(Place):-  
  can_go(Place),
  move(Place),
  look.
Next we fill in the details. We can go to a room if it connects to where we are. 

can_go(Place):- 
  here(X),
  connect(X, Place).
We can test can_go/1 immediately (assuming we are in the kitchen). 

?- can_go(office).
yes

?- can_go(hall).
no
Now, can_go/1 succeeds and fails as we want it to, but it would be nice if it gave us a message when it failed. By adding a second clause, which is tried if the first one fails, we can cause can_go/1 to write an error message. Since we want can_go/1 to fail in this situation we also need to add a fail to the second clause. 

can_go(Place):-
  here(X),
  connect(X, Place).
can_go(Place):-
  write('You can''t get there from here.'), nl,
  fail.
This version of can_go/1 behaves as we want. 

?- can_go(hall).
You can't get there from here.
no
Next we develop move/1, which does the work of dynamically updating the database to reflect the new location of the player. It retracts the old clause for here/1 and replaces it with a new one. This way there will always be only one here/1 clause representing the current place. Because goto/1 calls can_go/1 before move/1, the new here/1 will always be a legal place in the game. 

move(Place):-
  retract(here(X)),
  asserta(here(Place)).
We can now use goto/1 to explore the game environment. The output it generates is from look/0, which we developed in chapter 5. 

?- goto(office).
You are in the office
You can see:
  desk
  computer
You can go to:
  hall
  kitchen
yes

?- goto(hall).
You are in the hall
You can see:
You can go to:
  dining room
  office
yes

?- goto(kitchen).
You can't get there from here.
no
We will also need 'asserta' and 'retract' to implement 'take' and 'put' commands in the game. 

Here is take/1. For it we will define a new predicate, have/1, which has one clause for each thing the game player has. Initially, have/1 is not defined because the player is not carrying anything. 

take(X):-  
  can_take(X),
  take_object(X).
can_take/1 is analogous to can_go/1. 

can_take(Thing) :-
  here(Place),
  location(Thing, Place).
can_take(Thing) :-
  write('There is no '), write(Thing),
  write(' here.'),
  nl, fail.
take_object/1 is analogous to move/1. It retracts a location/2 clause and asserts a have/1 clause, reflecting the movement of the object from the place to the player. 

take_object(X):-  
  retract(location(X,_)),
  asserta(have(X)),
  write('taken'), nl.
As we have seen, the variables in a clause are local to that clause. There are no global variables in Prolog, as there are in many other languages. The Prolog database serves that purpose. It allows all clauses to share information on a wider basis, replacing the need for global variables. 'asserts' and 'retracts' are the tools used to manipulate this global data. 

As with any programming language, global data can be a powerful concept, easily overused. They should be used with care, since they hide the communication of information between clauses. The same code will behave differently if the global data is changed. This can lead to hard-to-find bugs. 

Eliminating global data and the 'assert' and 'retract' capabilities of Prolog is a goal of many logic programmers. It is possible to write Prolog programs without modifying the database, thus eliminating the problem of global variables. This is done by carrying the information as arguments to the predicates. In the case of an adventure game, the complete state of the game could be represented as predicate arguments, with each command call
